#!/bin/sh

# Get changed files
changed_files=$(git diff --staged --name-only)

# Initialize module list
modules_to_format=()

# Project root path
project_root=$(pwd)

# Function to identify module
function find_module() {
  dir="$1"
  while [[ "$dir" != "$project_root" && "$dir" != "/" ]]; do
    # Module criteria: check build.gradle or build.gradle.kts file
    if [[ -f "$dir/build.gradle.kts" || -f "$dir/build.gradle" ]]; then
      # Return the directory as a module
      echo "$(realpath --relative-to="$project_root" "$dir")"
      return
    fi
    # Move to parent directory
    dir=$(dirname "$dir")
  done
}

# Identify modules in changed files
for file in $changed_files; do
  # Directory where the file belongs
  file_dir=$(dirname "$file")
  # Find the module path
  module=$(find_module "$project_root/$file_dir")
  build_module=$(echo "$module" | tr '/' ':')
  # Compare after removing unnecessary spaces
  build_module=$(echo "$build_module" | xargs)
  # "." Excluding modules
  if [[ "$build_module" == "." ]]; then
    continue
  fi
  # If the module is not in the list, add it
  if [[ -n "$build_module" && ! " ${modules_to_format[*]} " =~ " ${build_module} " ]]; then
    modules_to_format+=("$build_module")
  fi
done

# Output a list of modules with duplicates removed
echo "Modules to format:"
printf "%s\n" "${modules_to_format[@]}"

# ktlintFormat parallel execution
printf "%s\n" "${modules_to_format[@]}" | xargs -I {} ./gradlew ":{}:ktlintFormat"
